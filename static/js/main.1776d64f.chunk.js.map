{"version":3,"sources":["component/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","button","padding","marginTop","marginLeft","_ref","selectedQuote","assignNewQuoteIndex","getRandomColor","classes","newColor","react_default","a","createElement","Card","CardContent","style","marginRight","Typography","id","display","justifyContent","textAlign","height","color","fontFamily","fontWeight","fontSize","className","float","quote","author","IconButton","target","href","concat","index_es","icon","faTwitter","size","Button","margin","variant","backgroundColor","marginBottom","onClick","e","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","selectedQuoteIndex","bgColor","selectedColor","selectQuoteIndex","bind","assertThisInitialized","_this2","fetch","then","data","json","setState","item","Math","floor","random","length","console","log","Grid","container","justify","xs","lg","component_QuoteMachine","Number","isInteger","Component","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1776d64f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardContent';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport Typography from '@material-ui/core/Typography'; \r\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons';\r\nimport {withStyles} from '@material-ui/core/styles'; \r\n\r\nconst styles = theme=>({\r\n    button: {\r\n       \r\n        //backgroundColor:\"purple\",\r\n        padding: \"8px 18px 6px 18px\",\r\n        marginTop:\"0\",\r\n        marginLeft:\"25em\",\r\n      \r\n    }\r\n        \r\n       \r\n  });\r\n  \r\n  \r\nconst QuoteMachine =({selectedQuote,assignNewQuoteIndex,getRandomColor,classes,newColor})=>(  \r\n    \r\n    <Card>\r\n        \r\n            <CardContent style={{\r\n                marginTop:\"40px\",\r\n                marginLeft: \"80px\",\r\n                marginRight: \"80px\",\r\n            }}>\r\n               \r\n                <Typography id=\"text\">\r\n                \r\n                    <span style={{\r\n                        display:\"flex\",\r\n                        justifyContent:\"center\",\r\n                        textAlign:\"center\",\r\n                        height: \"auto\",\r\n                        color:newColor(),\r\n                        fontFamily: 'Cabin',\r\n                        fontWeight: \"500\",\r\n                        fontSize:\"2em\",\r\n                  \r\n                    }}><i className=\"fa fa-quote-left\" style={{\r\n                        fontSize:\"1em\",\r\n                        marginTop:\"0.3em\",\r\n                      float:\"right\",\r\n                      \r\n                    }}></i>{selectedQuote.quote}</span><br /><span style={{\r\n                        fontFamily: 'Fira Sans',\r\n                        textAlign: \"right\",\r\n                        display: \"block\",\r\n                        \r\n                        color:newColor(), }} id=\"author\">- {selectedQuote.author}</span>\r\n                </Typography>\r\n               \r\n            </CardContent>\r\n            <CardActions style={{\r\n                marginLeft: \"2em\",\r\n            }}>\r\n                <span style={{\r\n             \r\n                }}>\r\n            <IconButton id=\"tweet-quote\"\r\n                    target=\"_blank\"\r\n                    href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hastags=akhilmachine`}\r\n                    >\r\n                    <FontAwesomeIcon style={{ color: newColor(), }} icon={faTwitter} size=\"md\"></FontAwesomeIcon>\r\n                </IconButton>\r\n                    \r\n                <Button className={classes.margin} variant=\"contained\" size=\"small\" id=\"new-quote\" style={{\r\n                    color: \"white\",  \r\n                    backgroundColor: newColor(),              \r\n                \r\n        // padding: \"6px 18px 6px 18px\",\r\n     \r\n        \r\n         marginBottom: \"50\",\r\n         marginLeft:\"25em\",\r\n    }} onClick={ (e) => {\r\n    assignNewQuoteIndex();\r\n    getRandomColor();\r\n  }}>Next Quote</Button>\r\n  </span>\r\n\r\n              \r\n            </CardActions>\r\n           \r\n    </Card>\r\n\r\n    \r\n)\r\n\r\n\r\nexport default withStyles(styles)(QuoteMachine);","import React, {Component} from 'react';\nimport {random} from 'lodash';\nimport 'typeface-roboto';  \nimport QuoteMachine from './component/QuoteMachine';\nimport {Grid} from '@material-ui/core';\nimport {withStyles} from '@material-ui/core/styles'; \n\n\nconst styles={\n  container:{\n   \n    display: 'flex',\n    height: '100vh',\n    alignItems: 'center',\n  \n  }\n}\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      quotes:[],\n      selectedQuoteIndex: null,\n      bgColor : [\"#0652DD\",\"#fff200\",\"#16a085\",\"#27ae60\",\"#2c3e50\",\"#f39c12\",\"#e74c3c\",\"#9b59b6\",\"#FB6964\",\"#342224\",\"#472E32\",\"#BDBB99\", \"#77B1A9\",\"#73A857\",\"#1B1464\"],\n      selectedColor:'',\n    }\n    this.selectQuoteIndex=this.selectQuoteIndex.bind(this);\n    this.assignNewQuoteIndex=this.assignNewQuoteIndex.bind(this);\n    this.getRandomColor=this.getRandomColor.bind(this);\n    this.newColor=this.newColor.bind(this);\n    }\n  componentDidMount(){\n\n\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json').then(data=>data.json()).then(quotes=>this.setState({quotes},this.assignNewQuoteIndex))\n    this.getRandomColor();\n \n  }\n \n  getRandomColor(){\n    var item = this.state.bgColor[Math.floor(Math.random()*this.state.bgColor.length)];\n    this.setState({\n      selectedColor: item,\n    })\n  }\n  get selectedQuote(){\n    if(!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)){\n      return undefined;\n    }\n    return this.state.quotes[this.state.selectedQuoteIndex];\n  }\n selectQuoteIndex(){\n   if(!this.state.quotes.length){\n     return undefined;\n   }\n  return random(0,this.state.quotes.length-1)\n }\n assignNewQuoteIndex(){\n  this.setState({selectedQuoteIndex: this.selectQuoteIndex()});\n }\nnewColor(){\n  return this.state.selectedColor;\n}\n  render(){\n   \n    console.log(this.state.selectedQuoteIndex);\n    return(\n\n    <Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container style={{backgroundColor: this.state.selectedColor}}>\n        <Grid xs={11} lg={5} item>\n          {\n          this.selectedQuote?<QuoteMachine selectedQuote={this.selectedQuote} assignNewQuoteIndex={this.assignNewQuoteIndex}  getRandomColor={this.getRandomColor} newColor={this.newColor}/>: null\n          }\n        </Grid>\n      </Grid>\n     \n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}